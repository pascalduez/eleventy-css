const path = require('path');
const { writeFile, readFile } = require('fs').promises;
const slug = require('unique-slug');
const glob = require('@modular-css/glob');
const shortnames = require('@modular-css/shortnames')();
const cssnano = require('cssnano')();

const { fs, vol } = require('memfs');
// const { patchRequire } = require('fs-monkey');

const env = process.env.NODE_ENV;

function suitcss(file, selector) {
  let name = path.basename(file, '.css');
  let hash = slug(path.relative(process.cwd(), file));

  return `${name}-${selector}__${hash}`;
}

let namer = env === 'production' ? shortnames : suitcss;
let done = env === 'production' ? cssnano : null;

exports.data = () => ({
  permalink: 'styles/modules.css',
  eleventyExcludeFromCollections: true,
});

exports.render = async () => {
  let processor = await glob({
    search: ['**/*.css'],
    cwd: 'components',
    map: false,
    namer,
    done,
  });

  let result = await processor.output();

  let compositions = Object.keys(result.compositions).reduce((acc, curr) => {
    let { name } = path.parse(curr);
    acc[name] = result.compositions[curr];
    return acc;
  }, {});

  await writeFile(
    'modules.json',
    JSON.stringify(compositions, null, 2),
    'utf-8'
  );

  console.log(await readFile('modules.json', 'utf-8'));

  // await fs.promises.writeFile(
  //   '/modules.json',
  //   JSON.stringify(compositions, null, 2)
  // );

  // console.log(await fs.promises.readFile('/modules.json', 'utf-8'));

  // vol.fromJSON({ '/modules.json'}, '/app');

  // vol.fromJSON(
  //   { './modules.json': JSON.stringify(compositions, null, 2) },
  //   '/'
  // );

  // const json = {
  //   './modules.json': JSON.stringify(compositions, null, 2),
  // };
  // vol.fromJSON(json, '/');

  // // console.log(vol);

  // console.log(
  //   // fs.readFileSync('/app/README.md', 'utf8'),
  //   vol.readFileSync('/modules.json', 'utf8')
  // );

  // patchRequire(vol);

  return result.css;
};
